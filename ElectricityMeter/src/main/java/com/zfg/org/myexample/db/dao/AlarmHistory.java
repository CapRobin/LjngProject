package com.zfg.org.myexample.db.dao;

import com.zfg.org.myexample.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table alarm_history.
 */
public class AlarmHistory {

    private Long id;
    /** Not-null value. */
    private String name;
    private Long create_time;
    private boolean isread;
    private String content;
    /** Not-null value. */
    private String server_id;
    /** Not-null value. */
    private String server_mid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AlarmHistoryDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public AlarmHistory() {
    }

    public AlarmHistory(Long id) {
        this.id = id;
    }

    public AlarmHistory(Long id, String name, Long create_time, boolean isread, String content, String server_id, String server_mid) {
        this.id = id;
        this.name = name;
        this.create_time = create_time;
        this.isread = isread;
        this.content = content;
        this.server_id = server_id;
        this.server_mid = server_mid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAlarmHistoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Long getCreate_time() {
        return create_time;
    }

    public void setCreate_time(Long create_time) {
        this.create_time = create_time;
    }

    public boolean getIsread() {
        return isread;
    }

    public void setIsread(boolean isread) {
        this.isread = isread;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    /** Not-null value. */
    public String getServer_id() {
        return server_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setServer_id(String server_id) {
        this.server_id = server_id;
    }

    /** Not-null value. */
    public String getServer_mid() {
        return server_mid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setServer_mid(String server_mid) {
        this.server_mid = server_mid;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
