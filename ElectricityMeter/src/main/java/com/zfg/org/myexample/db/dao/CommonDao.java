package com.zfg.org.myexample.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zfg.org.myexample.db.dao.Common;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table common.
*/
public class CommonDao extends AbstractDao<Common, Long> {

    public static final String TABLENAME = "common";

    /**
     * Properties of entity Common.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Image_b = new Property(3, String.class, "image_b", false, "IMAGE_B");
        public final static Property Index = new Property(4, short.class, "index", false, "INDEX");
        public final static Property Group = new Property(5, String.class, "group", false, "GROUP");
        public final static Property Serverid = new Property(6, String.class, "serverid", false, "SERVERID");
    };

    private DaoSession daoSession;


    public CommonDao(DaoConfig config) {
        super(config);
    }
    
    public CommonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'common' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'IMAGE' TEXT," + // 2: image
                "'IMAGE_B' TEXT," + // 3: image_b
                "'INDEX' INTEGER NOT NULL ," + // 4: index
                "'GROUP' TEXT NOT NULL ," + // 5: group
                "'SERVERID' TEXT);"); // 6: serverid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'common'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Common entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String image_b = entity.getImage_b();
        if (image_b != null) {
            stmt.bindString(4, image_b);
        }
        stmt.bindLong(5, entity.getIndex());
        stmt.bindString(6, entity.getGroup());
 
        String serverid = entity.getServerid();
        if (serverid != null) {
            stmt.bindString(7, serverid);
        }
    }

    @Override
    protected void attachEntity(Common entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Common readEntity(Cursor cursor, int offset) {
        Common entity = new Common( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image_b
            cursor.getShort(offset + 4), // index
            cursor.getString(offset + 5), // group
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // serverid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Common entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage_b(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndex(cursor.getShort(offset + 4));
        entity.setGroup(cursor.getString(offset + 5));
        entity.setServerid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Common entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Common entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
