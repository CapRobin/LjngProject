package com.zfg.org.myexample.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zfg.org.myexample.db.dao.Sport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table sport.
*/
public class SportDao extends AbstractDao<Sport, Long> {

    public static final String TABLENAME = "sport";

    /**
     * Properties of entity Sport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Day = new Property(1, String.class, "day", false, "DAY");
        public final static Property SportName = new Property(2, String.class, "sportName", false, "SPORT_NAME");
        public final static Property SportTime = new Property(3, int.class, "sportTime", false, "SPORT_TIME");
        public final static Property Heart = new Property(4, Integer.class, "heart", false, "HEART");
        public final static Property Strength = new Property(5, String.class, "strength", false, "STRENGTH");
        public final static Property SportFeel = new Property(6, String.class, "sportFeel", false, "SPORT_FEEL");
        public final static Property SportUnit = new Property(7, String.class, "sportUnit", false, "SPORT_UNIT");
        public final static Property Suport = new Property(8, float.class, "suport", false, "SUPORT");
        public final static Property Total = new Property(9, float.class, "total", false, "TOTAL");
        public final static Property Create_time = new Property(10, long.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(11, long.class, "update_time", false, "UPDATE_TIME");
        public final static Property Mark = new Property(12, String.class, "mark", false, "MARK");
        public final static Property Service_mid = new Property(13, String.class, "service_mid", false, "SERVICE_MID");
        public final static Property Serverid = new Property(14, String.class, "serverid", false, "SERVERID");
        public final static Property Status = new Property(15, short.class, "status", false, "STATUS");
    };

    private DaoSession daoSession;


    public SportDao(DaoConfig config) {
        super(config);
    }
    
    public SportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'sport' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DAY' TEXT NOT NULL ," + // 1: day
                "'SPORT_NAME' TEXT NOT NULL ," + // 2: sportName
                "'SPORT_TIME' INTEGER NOT NULL ," + // 3: sportTime
                "'HEART' INTEGER," + // 4: heart
                "'STRENGTH' TEXT NOT NULL ," + // 5: strength
                "'SPORT_FEEL' TEXT NOT NULL ," + // 6: sportFeel
                "'SPORT_UNIT' TEXT NOT NULL ," + // 7: sportUnit
                "'SUPORT' REAL NOT NULL ," + // 8: suport
                "'TOTAL' REAL NOT NULL ," + // 9: total
                "'CREATE_TIME' INTEGER NOT NULL ," + // 10: create_time
                "'UPDATE_TIME' INTEGER NOT NULL ," + // 11: update_time
                "'MARK' TEXT," + // 12: mark
                "'SERVICE_MID' TEXT NOT NULL ," + // 13: service_mid
                "'SERVERID' TEXT," + // 14: serverid
                "'STATUS' INTEGER NOT NULL );"); // 15: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'sport'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sport entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDay());
        stmt.bindString(3, entity.getSportName());
        stmt.bindLong(4, entity.getSportTime());
 
        Integer heart = entity.getHeart();
        if (heart != null) {
            stmt.bindLong(5, heart);
        }
        stmt.bindString(6, entity.getStrength());
        stmt.bindString(7, entity.getSportFeel());
        stmt.bindString(8, entity.getSportUnit());
        stmt.bindDouble(9, entity.getSuport());
        stmt.bindDouble(10, entity.getTotal());
        stmt.bindLong(11, entity.getCreate_time());
        stmt.bindLong(12, entity.getUpdate_time());
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(13, mark);
        }
        stmt.bindString(14, entity.getService_mid());
 
        String serverid = entity.getServerid();
        if (serverid != null) {
            stmt.bindString(15, serverid);
        }
        stmt.bindLong(16, entity.getStatus());
    }

    @Override
    protected void attachEntity(Sport entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sport readEntity(Cursor cursor, int offset) {
        Sport entity = new Sport( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // day
            cursor.getString(offset + 2), // sportName
            cursor.getInt(offset + 3), // sportTime
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // heart
            cursor.getString(offset + 5), // strength
            cursor.getString(offset + 6), // sportFeel
            cursor.getString(offset + 7), // sportUnit
            cursor.getFloat(offset + 8), // suport
            cursor.getFloat(offset + 9), // total
            cursor.getLong(offset + 10), // create_time
            cursor.getLong(offset + 11), // update_time
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mark
            cursor.getString(offset + 13), // service_mid
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // serverid
            cursor.getShort(offset + 15) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sport entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDay(cursor.getString(offset + 1));
        entity.setSportName(cursor.getString(offset + 2));
        entity.setSportTime(cursor.getInt(offset + 3));
        entity.setHeart(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStrength(cursor.getString(offset + 5));
        entity.setSportFeel(cursor.getString(offset + 6));
        entity.setSportUnit(cursor.getString(offset + 7));
        entity.setSuport(cursor.getFloat(offset + 8));
        entity.setTotal(cursor.getFloat(offset + 9));
        entity.setCreate_time(cursor.getLong(offset + 10));
        entity.setUpdate_time(cursor.getLong(offset + 11));
        entity.setMark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setService_mid(cursor.getString(offset + 13));
        entity.setServerid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStatus(cursor.getShort(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sport entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sport entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
