package com.zfg.org.myexample.db.dao;

import com.zfg.org.myexample.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table user.
 */
public class User {

    private Long id;
    /** Not-null value. */
    private String phone;



    private String user_name;

    private String user_pass;
    /** Not-null value. */
    private String nick_name;
    /** Not-null value. */
    private String service_mid;
    /** Not-null value. */
    private String service_uid;
    private float support;
    private long update_time;
    private long diabetes_time;
    private long eat_time;
    private long sport_time;
    private long medicine_time;
    private long surport_time;
    private long time_update;
    private long plan_update;
    private long indicate_update;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String phone,String user_name,String user_pass, String nick_name, String service_mid, String service_uid, float support, long update_time, long diabetes_time, long eat_time, long sport_time, long medicine_time, long surport_time, long time_update, long plan_update, long indicate_update) {
        this.id = id;
        this.user_name = user_name;
        this.user_pass = user_pass;
        this.phone = phone;
        this.nick_name = nick_name;
        this.service_mid = service_mid;
        this.service_uid = service_uid;
        this.support = support;
        this.update_time = update_time;
        this.diabetes_time = diabetes_time;
        this.eat_time = eat_time;
        this.sport_time = sport_time;
        this.medicine_time = medicine_time;
        this.surport_time = surport_time;
        this.time_update = time_update;
        this.plan_update = plan_update;
        this.indicate_update = indicate_update;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getPhone() {
        return phone;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getUser_name() {
        return user_name;
    }

    public void setUser_name(String user_name) {
        this.user_name = user_name;
    }

    public String getUser_pass() {
        return user_pass;
    }

    public void setUser_pass(String user_pass) {
        this.user_pass = user_pass;
    }
    /** Not-null value. */
    public String getNick_name() {
        return nick_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNick_name(String nick_name) {
        this.nick_name = nick_name;
    }

    /** Not-null value. */
    public String getService_mid() {
        return service_mid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setService_mid(String service_mid) {
        this.service_mid = service_mid;
    }

    /** Not-null value. */
    public String getService_uid() {
        return service_uid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setService_uid(String service_uid) {
        this.service_uid = service_uid;
    }

    public float getSupport() {
        return support;
    }

    public void setSupport(float support) {
        this.support = support;
    }

    public long getUpdate_time() {
        return update_time;
    }

    public void setUpdate_time(long update_time) {
        this.update_time = update_time;
    }

    public long getDiabetes_time() {
        return diabetes_time;
    }

    public void setDiabetes_time(long diabetes_time) {
        this.diabetes_time = diabetes_time;
    }

    public long getEat_time() {
        return eat_time;
    }

    public void setEat_time(long eat_time) {
        this.eat_time = eat_time;
    }

    public long getSport_time() {
        return sport_time;
    }

    public void setSport_time(long sport_time) {
        this.sport_time = sport_time;
    }

    public long getMedicine_time() {
        return medicine_time;
    }

    public void setMedicine_time(long medicine_time) {
        this.medicine_time = medicine_time;
    }

    public long getSurport_time() {
        return surport_time;
    }

    public void setSurport_time(long surport_time) {
        this.surport_time = surport_time;
    }

    public long getTime_update() {
        return time_update;
    }

    public void setTime_update(long time_update) {
        this.time_update = time_update;
    }

    public long getPlan_update() {
        return plan_update;
    }

    public void setPlan_update(long plan_update) {
        this.plan_update = plan_update;
    }

    public long getIndicate_update() {
        return indicate_update;
    }

    public void setIndicate_update(long indicate_update) {
        this.indicate_update = indicate_update;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
