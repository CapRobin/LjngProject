package com.zfg.org.myexample.db.dao;

import com.zfg.org.myexample.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table sport.
 */
public class Sport {

    private Long id;
    /** Not-null value. */
    private String day;
    /** Not-null value. */
    private String sportName;
    private int sportTime;
    private Integer heart;
    /** Not-null value. */
    private String strength;
    /** Not-null value. */
    private String sportFeel;
    /** Not-null value. */
    private String sportUnit;
    private float suport;
    private float total;
    private long create_time;
    private long update_time;
    private String mark;
    /** Not-null value. */
    private String service_mid;
    private String serverid;
    private short status;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SportDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Sport() {
    }

    public Sport(Long id) {
        this.id = id;
    }

    public Sport(Long id, String day, String sportName, int sportTime, Integer heart, String strength, String sportFeel, String sportUnit, float suport, float total, long create_time, long update_time, String mark, String service_mid, String serverid, short status) {
        this.id = id;
        this.day = day;
        this.sportName = sportName;
        this.sportTime = sportTime;
        this.heart = heart;
        this.strength = strength;
        this.sportFeel = sportFeel;
        this.sportUnit = sportUnit;
        this.suport = suport;
        this.total = total;
        this.create_time = create_time;
        this.update_time = update_time;
        this.mark = mark;
        this.service_mid = service_mid;
        this.serverid = serverid;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSportDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getDay() {
        return day;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDay(String day) {
        this.day = day;
    }

    /** Not-null value. */
    public String getSportName() {
        return sportName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSportName(String sportName) {
        this.sportName = sportName;
    }

    public int getSportTime() {
        return sportTime;
    }

    public void setSportTime(int sportTime) {
        this.sportTime = sportTime;
    }

    public Integer getHeart() {
        return heart;
    }

    public void setHeart(Integer heart) {
        this.heart = heart;
    }

    /** Not-null value. */
    public String getStrength() {
        return strength;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStrength(String strength) {
        this.strength = strength;
    }

    /** Not-null value. */
    public String getSportFeel() {
        return sportFeel;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSportFeel(String sportFeel) {
        this.sportFeel = sportFeel;
    }

    /** Not-null value. */
    public String getSportUnit() {
        return sportUnit;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSportUnit(String sportUnit) {
        this.sportUnit = sportUnit;
    }

    public float getSuport() {
        return suport;
    }

    public void setSuport(float suport) {
        this.suport = suport;
    }

    public float getTotal() {
        return total;
    }

    public void setTotal(float total) {
        this.total = total;
    }

    public long getCreate_time() {
        return create_time;
    }

    public void setCreate_time(long create_time) {
        this.create_time = create_time;
    }

    public long getUpdate_time() {
        return update_time;
    }

    public void setUpdate_time(long update_time) {
        this.update_time = update_time;
    }

    public String getMark() {
        return mark;
    }

    public void setMark(String mark) {
        this.mark = mark;
    }

    /** Not-null value. */
    public String getService_mid() {
        return service_mid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setService_mid(String service_mid) {
        this.service_mid = service_mid;
    }

    public String getServerid() {
        return serverid;
    }

    public void setServerid(String serverid) {
        this.serverid = serverid;
    }

    public short getStatus() {
        return status;
    }

    public void setStatus(short status) {
        this.status = status;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
