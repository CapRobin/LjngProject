package com.zfg.org.myexample.db.dao;

import com.zfg.org.myexample.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table news.
 */
public class News {

    private Long id;
    /** Not-null value. */
    private String thumbnail;
    /** Not-null value. */
    private String title;
    /** Not-null value. */
    private String author;
    /** Not-null value. */
    private String summary;
    private long day;
    private String content;
    private long sid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NewsDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public News() {
    }

    public News(Long id) {
        this.id = id;
    }

    public News(Long id, String thumbnail, String title, String author, String summary, long day, String content, long sid) {
        this.id = id;
        this.thumbnail = thumbnail;
        this.title = title;
        this.author = author;
        this.summary = summary;
        this.day = day;
        this.content = content;
        this.sid = sid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNewsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getThumbnail() {
        return thumbnail;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    /** Not-null value. */
    public String getAuthor() {
        return author;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAuthor(String author) {
        this.author = author;
    }

    /** Not-null value. */
    public String getSummary() {
        return summary;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSummary(String summary) {
        this.summary = summary;
    }

    public long getDay() {
        return day;
    }

    public void setDay(long day) {
        this.day = day;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public long getSid() {
        return sid;
    }

    public void setSid(long sid) {
        this.sid = sid;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
