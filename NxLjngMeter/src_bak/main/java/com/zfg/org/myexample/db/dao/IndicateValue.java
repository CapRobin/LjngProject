package com.zfg.org.myexample.db.dao;

import com.zfg.org.myexample.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table indicatevalue.
 */
public class IndicateValue {

	private Long id;
	private float value;
	private int level;
	private float value1;
	private int level1;
	private long create_time;
	private long update_time;
	/** Not-null value. */
	private String service_mid;
	private String serverid;
	private short status;
	/** Not-null value. */
	private String group;
	/** Not-null value. */
	private String markNo;
	/** Not-null value. */
	private String key;

	private int up_down;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient IndicateValueDao myDao;

	// KEEP FIELDS - put your custom fields here
	// KEEP FIELDS END

	public IndicateValue() {
	}

	public IndicateValue(Long id) {
		this.id = id;
	}

	public IndicateValue(Long id, float value, int level, float value1,
			int level1, long create_time, long update_time, String service_mid,
			String serverid, short status, String group, String markNo,
			String key) {
		this.id = id;
		this.value = value;
		this.level = level;
		this.value1 = value1;
		this.level1 = level1;
		this.create_time = create_time;
		this.update_time = update_time;
		this.service_mid = service_mid;
		this.serverid = serverid;
		this.status = status;
		this.group = group;
		this.markNo = markNo;
		this.key = key;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getIndicateValueDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public float getValue() {
		return value;
	}

	public void setValue(float value) {
		this.value = value;
	}

	public int getUp_down() {
		return up_down;
	}

	public void setUp_down(int up_down) {
		this.up_down = up_down;
	}

	public int getLevel() {
		return level;
	}

	public void setLevel(int level) {
		this.level = level;
	}

	public float getValue1() {
		return value1;
	}

	public void setValue1(float value1) {
		this.value1 = value1;
	}

	public int getLevel1() {
		return level1;
	}

	public void setLevel1(int level1) {
		this.level1 = level1;
	}

	public long getCreate_time() {
		return create_time;
	}

	public void setCreate_time(long create_time) {
		this.create_time = create_time;
	}

	public long getUpdate_time() {
		return update_time;
	}

	public void setUpdate_time(long update_time) {
		this.update_time = update_time;
	}

	/** Not-null value. */
	public String getService_mid() {
		return service_mid;
	}

	/**
	 * Not-null value; ensure this value is available before it is saved to the
	 * database.
	 */
	public void setService_mid(String service_mid) {
		this.service_mid = service_mid;
	}

	public String getServerid() {
		return serverid;
	}

	public void setServerid(String serverid) {
		this.serverid = serverid;
	}

	public short getStatus() {
		return status;
	}

	public void setStatus(short status) {
		this.status = status;
	}

	/** Not-null value. */
	public String getGroup() {
		return group;
	}

	/**
	 * Not-null value; ensure this value is available before it is saved to the
	 * database.
	 */
	public void setGroup(String group) {
		this.group = group;
	}

	/** Not-null value. */
	public String getMarkNo() {
		return markNo;
	}

	/**
	 * Not-null value; ensure this value is available before it is saved to the
	 * database.
	 */
	public void setMarkNo(String markNo) {
		this.markNo = markNo;
	}

	/** Not-null value. */
	public String getKey() {
		return key;
	}

	/**
	 * Not-null value; ensure this value is available before it is saved to the
	 * database.
	 */
	public void setKey(String key) {
		this.key = key;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

	// KEEP METHODS - put your custom methods here
	// KEEP METHODS END

}
