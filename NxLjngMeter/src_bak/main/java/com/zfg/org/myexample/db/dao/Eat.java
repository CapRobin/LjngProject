package com.zfg.org.myexample.db.dao;

import com.zfg.org.myexample.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table eat.
 */
public class Eat {

    private Long id;
    /** Not-null value. */
    private String day;
    private int dinnerType;
    /** Not-null value. */
    private String foodName;
    /** Not-null value. */
    private String foodType;
    private float foodWeight;
    private float total;
    /** Not-null value. */
    private String cookType;
    /** Not-null value. */
    private String caloreType;
    /** Not-null value. */
    private String nutriType;
    private long create_time;
    private long update_time;
    private float surport;
    private String mark;
    /** Not-null value. */
    private String service_mid;
    private String serverid;
    private short status;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EatDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Eat() {
    }

    public Eat(Long id) {
        this.id = id;
    }

    public Eat(Long id, String day, int dinnerType, String foodName, String foodType, float foodWeight, float total, String cookType, String caloreType, String nutriType, long create_time, long update_time, float surport, String mark, String service_mid, String serverid, short status) {
        this.id = id;
        this.day = day;
        this.dinnerType = dinnerType;
        this.foodName = foodName;
        this.foodType = foodType;
        this.foodWeight = foodWeight;
        this.total = total;
        this.cookType = cookType;
        this.caloreType = caloreType;
        this.nutriType = nutriType;
        this.create_time = create_time;
        this.update_time = update_time;
        this.surport = surport;
        this.mark = mark;
        this.service_mid = service_mid;
        this.serverid = serverid;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEatDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getDay() {
        return day;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDay(String day) {
        this.day = day;
    }

    public int getDinnerType() {
        return dinnerType;
    }

    public void setDinnerType(int dinnerType) {
        this.dinnerType = dinnerType;
    }

    /** Not-null value. */
    public String getFoodName() {
        return foodName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFoodName(String foodName) {
        this.foodName = foodName;
    }

    /** Not-null value. */
    public String getFoodType() {
        return foodType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFoodType(String foodType) {
        this.foodType = foodType;
    }

    public float getFoodWeight() {
        return foodWeight;
    }

    public void setFoodWeight(float foodWeight) {
        this.foodWeight = foodWeight;
    }

    public float getTotal() {
        return total;
    }

    public void setTotal(float total) {
        this.total = total;
    }

    /** Not-null value. */
    public String getCookType() {
        return cookType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCookType(String cookType) {
        this.cookType = cookType;
    }

    /** Not-null value. */
    public String getCaloreType() {
        return caloreType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCaloreType(String caloreType) {
        this.caloreType = caloreType;
    }

    /** Not-null value. */
    public String getNutriType() {
        return nutriType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNutriType(String nutriType) {
        this.nutriType = nutriType;
    }

    public long getCreate_time() {
        return create_time;
    }

    public void setCreate_time(long create_time) {
        this.create_time = create_time;
    }

    public long getUpdate_time() {
        return update_time;
    }

    public void setUpdate_time(long update_time) {
        this.update_time = update_time;
    }

    public float getSurport() {
        return surport;
    }

    public void setSurport(float surport) {
        this.surport = surport;
    }

    public String getMark() {
        return mark;
    }

    public void setMark(String mark) {
        this.mark = mark;
    }

    /** Not-null value. */
    public String getService_mid() {
        return service_mid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setService_mid(String service_mid) {
        this.service_mid = service_mid;
    }

    public String getServerid() {
        return serverid;
    }

    public void setServerid(String serverid) {
        this.serverid = serverid;
    }

    public short getStatus() {
        return status;
    }

    public void setStatus(short status) {
        this.status = status;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
