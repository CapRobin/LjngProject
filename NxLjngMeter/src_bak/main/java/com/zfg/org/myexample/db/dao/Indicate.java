package com.zfg.org.myexample.db.dao;

import com.zfg.org.myexample.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table indicate.
 */
public class Indicate {

    private Long id;
    /** Not-null value. */
    private String key;
    private Integer img;
    private String name;
    private String union;
    private long update_time;
    private float last_value;
    private Float value1;
    private int level;
    private int up_down;
    /** Not-null value. */
    private String service_mid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient IndicateDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Indicate() {
    }

    public Indicate(Long id) {
        this.id = id;
    }

    public Indicate(Long id, String key, Integer img, String name, String union, long update_time, float last_value, Float value1, int level, int up_down, String service_mid) {
        this.id = id;
        this.key = key;
        this.img = img;
        this.name = name;
        this.union = union;
        this.update_time = update_time;
        this.last_value = last_value;
        this.value1 = value1;
        this.level = level;
        this.up_down = up_down;
        this.service_mid = service_mid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getIndicateDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getKey() {
        return key;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setKey(String key) {
        this.key = key;
    }

    public Integer getImg() {
        return img;
    }

    public void setImg(Integer img) {
        this.img = img;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getUnion() {
        return union;
    }

    public void setUnion(String union) {
        this.union = union;
    }

    public long getUpdate_time() {
        return update_time;
    }

    public void setUpdate_time(long update_time) {
        this.update_time = update_time;
    }

    public float getLast_value() {
        return last_value;
    }

    public void setLast_value(float last_value) {
        this.last_value = last_value;
    }

    public Float getValue1() {
        return value1;
    }

    public void setValue1(Float value1) {
        this.value1 = value1;
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        this.level = level;
    }

    public int getUp_down() {
        return up_down;
    }

    public void setUp_down(int up_down) {
        this.up_down = up_down;
    }

    /** Not-null value. */
    public String getService_mid() {
        return service_mid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setService_mid(String service_mid) {
        this.service_mid = service_mid;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
