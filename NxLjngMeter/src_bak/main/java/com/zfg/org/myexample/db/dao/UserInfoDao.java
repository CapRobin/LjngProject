package com.zfg.org.myexample.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zfg.org.myexample.db.dao.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table USER_INFO.
 */
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, Long.class, "uid", false, "UID");
        public final static Property Mid = new Property(2, Long.class, "mid", false, "MID");
        public final static Property Nick_name = new Property(3, String.class, "nick_name", false,
                "NICK_NAME");
        public final static Property Sex = new Property(4, Integer.class, "sex", false, "SEX");
        public final static Property Matrix = new Property(5, String.class, "matrix", false,
                "MATRIX");
        public final static Property Age = new Property(6, Integer.class, "age", false, "AGE");
        public final static Property Height = new Property(7, Double.class, "height", false,
                "HEIGHT");
        public final static Property Weight = new Property(8, Double.class, "weight", false,
                "WEIGHT");
        public final static Property Waist = new Property(9, Integer.class, "waist", false, "WAIST");
        public final static Property Bmi = new Property(10, Float.class, "bmi", false, "BMI");
        public final static Property Province = new Property(11, Integer.class, "province", false,
                "PROVINCE");
        public final static Property City = new Property(12, Integer.class, "city", false, "CITY");
        public final static Property Career = new Property(13, String.class, "career", false,
                "CAREER");
        public final static Property Nation = new Property(14, String.class, "nation", false,
                "NATION");
        public final static Property Avatar = new Property(15, String.class, "avatar", false,
                "AVATAR");
        public final static Property ExamStatus = new Property(16, Integer.class, "examStatus", false,
                "EXAMSTATUS");
    };

    private DaoSession daoSession;

    public UserInfoDao(DaoConfig config) {
        super(config);
    }

    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'UID' INTEGER," + // 1: uid
                "'MID' INTEGER," + // 2: mid
                "'NICK_NAME' TEXT," + // 3: nick_name
                "'SEX' INTEGER," + // 4: sex
                "'MATRIX' TEXT," + // 5: matrix
                "'AGE' INTEGER," + // 6: age
                "'HEIGHT' REAL," + // 7: height
                "'WEIGHT' REAL," + // 8: weight
                "'WAIST' REAL," + // 8: waist
                "'BMI' REAL," + // 10: bmi
                "'PROVINCE' INTEGER," + // 11: province
                "'CITY' INTEGER," + // 12: city
                "'CAREER' INTEGER," + // 13: career
                "'NATION' TEXT," + // 14: nation
                "'AVATAR' TEXT," +
                "'EXAMSTATUS' INTEGER);"); // 15: avatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(2, uid);
        }
        
        Long mid = entity.getMid();
        if (mid != null) {
            stmt.bindLong(3, mid);
        }

        String nickname = entity.getNick_name();
        if(nickname != null){
            stmt.bindString(4, nickname);
        }

        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(5, sex);
        }
        
        String matrix = entity.getMatrix();
        if(matrix != null){
            stmt.bindString(6, matrix);
        }

        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(7, age);
        }

        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(8, height);
        }

        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(9, weight);
        }

        Integer waist = entity.getWaist();
        if (waist != null) {
            stmt.bindDouble(10, waist);
        }

        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(11, bmi);
        }

        Integer province = entity.getProvince();
        if (province != null) {
            stmt.bindLong(12, province);
        }

        Integer city = entity.getCity();
        if (city != null) {
            stmt.bindLong(13, city);
        }

        String career = entity.getCareer();
        if(career != null){
            stmt.bindString(14, career);
        }

        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(15, nation);
        }

        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(16, avatar);
        }
        
        Integer examStatus = entity.getExamStatus();
        if(examStatus != null){
        	stmt.bindLong(17, examStatus);
        }
    }

    @Override
    protected void attachEntity(UserInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
                cursor.getLong(offset + 0),//id
                cursor.isNull(offset + 1)? null : cursor.getLong(offset+1), // uid
                cursor.isNull(offset + 2)? null : cursor.getLong(offset+2), // mid
                cursor.isNull(offset + 3)? null : cursor.getString(offset+3), // nick_name
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sex
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // matrix
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // age
                cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // height
                cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // weight
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // waist
                cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // bmi
                cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // province
                cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // city
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // career
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // nation
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // avatar
                cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16)
        );
        return entity;
    }
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.getLong(offset+0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setNick_name(cursor.isNull(offset + 3)? null : cursor.getString(offset+3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMatrix(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAge(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHeight(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setWeight(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setWaist(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBmi(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setProvince(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCity(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setCareer(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNation(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAvatar(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setExamStatus(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
