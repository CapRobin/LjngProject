package com.zfg.org.myexample.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zfg.org.myexample.db.dao.Normal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table normal.
*/
public class NormalDao extends AbstractDao<Normal, Long> {

    public static final String TABLENAME = "normal";

    /**
     * Properties of entity Normal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IssueId = new Property(1, long.class, "issueId", false, "ISSUE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Does = new Property(3, String.class, "does", false, "DOES");
        public final static Property Unit = new Property(4, String.class, "unit", false, "UNIT");
        public final static Property Times = new Property(5, String.class, "times", false, "TIMES");
        public final static Property Category = new Property(6, String.class, "category", false, "CATEGORY");
        public final static Property Num = new Property(7, int.class, "num", false, "NUM");
        public final static Property Parent = new Property(8, int.class, "parent", false, "PARENT");
    };

    private DaoSession daoSession;


    public NormalDao(DaoConfig config) {
        super(config);
    }
    
    public NormalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'normal' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ISSUE_ID' INTEGER NOT NULL ," + // 1: issueId
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'DOES' TEXT," + // 3: does
                "'UNIT' TEXT," + // 4: unit
                "'TIMES' TEXT," + // 5: times
                "'CATEGORY' TEXT," + // 6: category
                "'NUM' INTEGER NOT NULL ," + // 7: num
                "'PARENT' INTEGER NOT NULL );"); // 8: parent
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'normal'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Normal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIssueId());
        stmt.bindString(3, entity.getName());
 
        String does = entity.getDoes();
        if (does != null) {
            stmt.bindString(4, does);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(5, unit);
        }
 
        String times = entity.getTimes();
        if (times != null) {
            stmt.bindString(6, times);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
        stmt.bindLong(8, entity.getNum());
        stmt.bindLong(9, entity.getParent());
    }

    @Override
    protected void attachEntity(Normal entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Normal readEntity(Cursor cursor, int offset) {
        Normal entity = new Normal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // issueId
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // does
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // times
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // category
            cursor.getInt(offset + 7), // num
            cursor.getInt(offset + 8) // parent
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Normal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIssueId(cursor.getLong(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setDoes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimes(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNum(cursor.getInt(offset + 7));
        entity.setParent(cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Normal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Normal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
