package com.zfg.org.myexample.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zfg.org.myexample.db.dao.IndicateValue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table indicatevalue.
*/
public class IndicateValueDao extends AbstractDao<IndicateValue, Long> {

    public static final String TABLENAME = "indicatevalue";

    /**
     * Properties of entity IndicateValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Value = new Property(1, float.class, "value", false, "VALUE");
        public final static Property Level = new Property(2, int.class, "level", false, "LEVEL");
        public final static Property Value1 = new Property(3, float.class, "value1", false, "VALUE1");
        public final static Property Level1 = new Property(4, int.class, "level1", false, "LEVEL1");
        public final static Property Create_time = new Property(5, long.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(6, long.class, "update_time", false, "UPDATE_TIME");
        public final static Property Service_mid = new Property(7, String.class, "service_mid", false, "SERVICE_MID");
        public final static Property Serverid = new Property(8, String.class, "serverid", false, "SERVERID");
        public final static Property Status = new Property(9, short.class, "status", false, "STATUS");
        public final static Property Group = new Property(10, String.class, "group", false, "GROUP");
        public final static Property MarkNo = new Property(11, String.class, "markNo", false, "MARK_NO");
        public final static Property Key = new Property(12, String.class, "key", false, "KEY");
    };

    private DaoSession daoSession;


    public IndicateValueDao(DaoConfig config) {
        super(config);
    }
    
    public IndicateValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'indicatevalue' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'VALUE' REAL NOT NULL ," + // 1: value
                "'LEVEL' INTEGER NOT NULL ," + // 2: level
                "'VALUE1' REAL NOT NULL ," + // 3: value1
                "'LEVEL1' INTEGER NOT NULL ," + // 4: level1
                "'CREATE_TIME' INTEGER NOT NULL ," + // 5: create_time
                "'UPDATE_TIME' INTEGER NOT NULL ," + // 6: update_time
                "'SERVICE_MID' TEXT NOT NULL ," + // 7: service_mid
                "'SERVERID' TEXT," + // 8: serverid
                "'STATUS' INTEGER NOT NULL ," + // 9: status
                "'GROUP' TEXT NOT NULL ," + // 10: group
                "'MARK_NO' TEXT NOT NULL ," + // 11: markNo
                "'KEY' TEXT NOT NULL );"); // 12: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'indicatevalue'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IndicateValue entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getValue());
        stmt.bindLong(3, entity.getLevel());
        stmt.bindDouble(4, entity.getValue1());
        stmt.bindLong(5, entity.getLevel1());
        stmt.bindLong(6, entity.getCreate_time());
        stmt.bindLong(7, entity.getUpdate_time());
        stmt.bindString(8, entity.getService_mid());
 
        String serverid = entity.getServerid();
        if (serverid != null) {
            stmt.bindString(9, serverid);
        }
        stmt.bindLong(10, entity.getStatus());
        stmt.bindString(11, entity.getGroup());
        stmt.bindString(12, entity.getMarkNo());
        stmt.bindString(13, entity.getKey());
    }

    @Override
    protected void attachEntity(IndicateValue entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IndicateValue readEntity(Cursor cursor, int offset) {
        IndicateValue entity = new IndicateValue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getFloat(offset + 1), // value
            cursor.getInt(offset + 2), // level
            cursor.getFloat(offset + 3), // value1
            cursor.getInt(offset + 4), // level1
            cursor.getLong(offset + 5), // create_time
            cursor.getLong(offset + 6), // update_time
            cursor.getString(offset + 7), // service_mid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // serverid
            cursor.getShort(offset + 9), // status
            cursor.getString(offset + 10), // group
            cursor.getString(offset + 11), // markNo
            cursor.getString(offset + 12) // key
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IndicateValue entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setValue(cursor.getFloat(offset + 1));
        entity.setLevel(cursor.getInt(offset + 2));
        entity.setValue1(cursor.getFloat(offset + 3));
        entity.setLevel1(cursor.getInt(offset + 4));
        entity.setCreate_time(cursor.getLong(offset + 5));
        entity.setUpdate_time(cursor.getLong(offset + 6));
        entity.setService_mid(cursor.getString(offset + 7));
        entity.setServerid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.getShort(offset + 9));
        entity.setGroup(cursor.getString(offset + 10));
        entity.setMarkNo(cursor.getString(offset + 11));
        entity.setKey(cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IndicateValue entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IndicateValue entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
