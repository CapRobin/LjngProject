package com.zfg.org.myexample.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zfg.org.myexample.db.dao.Diabetes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table blood.
*/
public class DiabetesDao extends AbstractDao<Diabetes, Long> {

    public static final String TABLENAME = "blood";

    /**
     * Properties of entity Diabetes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, short.class, "type", false, "TYPE");
        public final static Property Sub_type = new Property(2, int.class, "sub_type", false, "SUB_TYPE");
        public final static Property Day = new Property(3, String.class, "day", false, "DAY");
        public final static Property Level = new Property(4, int.class, "level", false, "LEVEL");
        public final static Property Value = new Property(5, float.class, "value", false, "VALUE");
        public final static Property Mark = new Property(6, String.class, "mark", false, "MARK");
        public final static Property Feel = new Property(7, String.class, "feel", false, "FEEL");
        public final static Property Create_time = new Property(8, long.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(9, long.class, "update_time", false, "UPDATE_TIME");
        public final static Property Service_mid = new Property(10, String.class, "service_mid", false, "SERVICE_MID");
        public final static Property Serverid = new Property(11, String.class, "serverid", false, "SERVERID");
        public final static Property Status = new Property(12, short.class, "status", false, "STATUS");
    };

    private DaoSession daoSession;


    public DiabetesDao(DaoConfig config) {
        super(config);
    }
    
    public DiabetesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'blood' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TYPE' INTEGER NOT NULL ," + // 1: type
                "'SUB_TYPE' INTEGER NOT NULL ," + // 2: sub_type
                "'DAY' TEXT NOT NULL ," + // 3: day
                "'LEVEL' INTEGER NOT NULL ," + // 4: level
                "'VALUE' REAL NOT NULL ," + // 5: value
                "'MARK' TEXT," + // 6: mark
                "'FEEL' TEXT," + // 7: feel
                "'CREATE_TIME' INTEGER NOT NULL ," + // 8: create_time
                "'UPDATE_TIME' INTEGER NOT NULL ," + // 9: update_time
                "'SERVICE_MID' TEXT NOT NULL ," + // 10: service_mid
                "'SERVERID' TEXT," + // 11: serverid
                "'STATUS' INTEGER NOT NULL );"); // 12: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'blood'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Diabetes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getSub_type());
        stmt.bindString(4, entity.getDay());
        stmt.bindLong(5, entity.getLevel());
        stmt.bindDouble(6, entity.getValue());
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(7, mark);
        }
 
        String feel = entity.getFeel();
        if (feel != null) {
            stmt.bindString(8, feel);
        }
        stmt.bindLong(9, entity.getCreate_time());
        stmt.bindLong(10, entity.getUpdate_time());
        stmt.bindString(11, entity.getService_mid());
 
        String serverid = entity.getServerid();
        if (serverid != null) {
            stmt.bindString(12, serverid);
        }
        stmt.bindLong(13, entity.getStatus());
    }

    @Override
    protected void attachEntity(Diabetes entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Diabetes readEntity(Cursor cursor, int offset) {
        Diabetes entity = new Diabetes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1), // type
            cursor.getInt(offset + 2), // sub_type
            cursor.getString(offset + 3), // day
            cursor.getInt(offset + 4), // level
            cursor.getFloat(offset + 5), // value
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // feel
            cursor.getLong(offset + 8), // create_time
            cursor.getLong(offset + 9), // update_time
            cursor.getString(offset + 10), // service_mid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // serverid
            cursor.getShort(offset + 12) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Diabetes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getShort(offset + 1));
        entity.setSub_type(cursor.getInt(offset + 2));
        entity.setDay(cursor.getString(offset + 3));
        entity.setLevel(cursor.getInt(offset + 4));
        entity.setValue(cursor.getFloat(offset + 5));
        entity.setMark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFeel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreate_time(cursor.getLong(offset + 8));
        entity.setUpdate_time(cursor.getLong(offset + 9));
        entity.setService_mid(cursor.getString(offset + 10));
        entity.setServerid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStatus(cursor.getShort(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Diabetes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Diabetes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
