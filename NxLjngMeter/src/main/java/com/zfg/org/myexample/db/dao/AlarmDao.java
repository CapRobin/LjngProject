package com.zfg.org.myexample.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zfg.org.myexample.db.dao.Alarm;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table alarm.
*/
public class AlarmDao extends AbstractDao<Alarm, Long> {

    public static final String TABLENAME = "alarm";

    /**
     * Properties of entity Alarm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Service_mid = new Property(1, String.class, "service_mid", false, "SERVICE_MID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(3, short.class, "type", false, "TYPE");
        public final static Property Sub_type = new Property(4, Short.class, "sub_type", false, "SUB_TYPE");
        public final static Property Hour = new Property(5, short.class, "hour", false, "HOUR");
        public final static Property Minite = new Property(6, short.class, "minite", false, "MINITE");
        public final static Property Alarm_time = new Property(7, long.class, "alarm_time", false, "ALARM_TIME");
        public final static Property Day_of_week = new Property(8, Integer.class, "day_of_week", false, "DAY_OF_WEEK");
        public final static Property Un_week = new Property(9, Integer.class, "un_week", false, "UN_WEEK");
        public final static Property Enable = new Property(10, boolean.class, "enable", false, "ENABLE");
        public final static Property Message = new Property(11, String.class, "message", false, "MESSAGE");
        public final static Property Oid = new Property(12, Long.class, "oid", false, "OID");
        public final static Property Repeat = new Property(13, Long.class, "repeat", false, "REPEAT");
        public final static Property Createtime = new Property(14, Long.class, "createtime", false, "CREATETIME");
        public final static Property Uid = new Property(15, String.class, "uid", false, "UID");
    };

    private DaoSession daoSession;


    public AlarmDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'alarm' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SERVICE_mid' TEXT NOT NULL ," + // 1: service_mid
                "'TITLE' TEXT NOT NULL," +
                "'TYPE' INTEGER NOT NULL ," + // 2: type
                "'SUB_TYPE' INTEGER," + // 3: sub_type
                "'HOUR' INTEGER NOT NULL ," + // 4: hour
                "'MINITE' INTEGER NOT NULL ," + // 5: minite
                "'ALARM_TIME' INTEGER NOT NULL ," + // 6: alarm_time
                "'DAY_OF_WEEK' INTEGER," + // 7: day_of_week
                "'UN_WEEK' INTEGER," + // 7: un_week
                "'ENABLE' INTEGER NOT NULL ," + // 8: enable
                "'MESSAGE' TEXT ," +
                "'OID' INTEGER," +
                "'REPEAT' INTEGER," +
                "'CREATETIME' INTEGER," +
                "'UID' TEXT NOT NULL);"); // 9: message
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'alarm'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Alarm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getService_mid());
        stmt.bindString(3, entity.getTitle());
        stmt.bindLong(4, entity.getType());
 
        Short sub_type = entity.getSub_type();
        if (sub_type != null) {
            stmt.bindLong(5, sub_type);
        }
        stmt.bindLong(6, entity.getHour());
        stmt.bindLong(7, entity.getMinite());
        stmt.bindLong(8, entity.getAlarm_time());
 
        Integer day_of_week = entity.getDay_of_week();
        if (day_of_week != null) {
            stmt.bindLong(9, day_of_week);
        }
        Integer un_week = entity.getUn_week();
        if (un_week != null) {
            stmt.bindLong(10, un_week);
        }
        stmt.bindLong(11, entity.getEnable() ? 1l: 0l);
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(12, message);
        }
        stmt.bindLong(13, entity.getoId());
        stmt.bindLong(14, entity.getRepeat());
        stmt.bindLong(15, entity.getCreateTime());
        stmt.bindString(16, entity.getUid());
    }

    @Override
    protected void attachEntity(Alarm entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Alarm readEntity(Cursor cursor, int offset) {
        Alarm entity = new Alarm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // service_mid
            cursor.getString(offset + 2),
            cursor.getShort(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4), // sub_type
            cursor.getShort(offset + 5), // hour
            cursor.getShort(offset + 6), // minite
            cursor.getLong(offset + 7), // alarm_time
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // day_of_week
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // un_week
            cursor.getShort(offset + 10) != 0, // enable
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // message
            cursor.getLong(offset + 12),
            cursor.getInt(offset + 13),
            cursor.getLong(offset + 14),
            cursor.getString(offset + 15)
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Alarm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setService_mid(cursor.getString(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setType(cursor.getShort(offset + 3));
        entity.setSub_type(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4));
        entity.setHour(cursor.getShort(offset + 5));
        entity.setMinite(cursor.getShort(offset + 6));
        entity.setAlarm_time(cursor.getLong(offset + 7));
        entity.setDay_of_week(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUnweek(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setEnable(cursor.getShort(offset + 10) != 0);
        entity.setMessage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setoId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setRepeat(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCreateTime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setUid(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Alarm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Alarm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
