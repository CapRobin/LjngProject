package com.zfg.org.myexample.db.dao;

import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import com.zfg.org.myexample.db.dao.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table USER_INFO.
 */
public class UserInfo {

	private Long id;
	private Long uid;
	private Long mid;
	private String nick_name;
	private Integer sex;
	private String matrix;
	private Integer age;
	private Double height;
	private Double weight;
	private Integer waist;
	private Double bmi;
	private Integer province;
	private Integer city;
	private String career;
	private String nation;
	private String avatar;
	private Integer examStatus;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient UserInfoDao myDao;

	// KEEP FIELDS - put your custom fields here
	// KEEP FIELDS END

	public UserInfo() {
	}

	public UserInfo(Long id) {
		this.id = id;
	}

	public UserInfo(Long id, Long uid, Long mid, String nick_name, Integer sex,
			String matrix, Integer age, Double height, Double weight,
			Integer waist, Double bmi, Integer province, Integer city,
			String career, String nation, String avatar, int examStatus) {
		this.id = id;
		this.uid = uid;
		this.mid = mid;
		this.nick_name = nick_name;
		this.sex = sex;
		this.matrix = matrix;
		this.age = age;
		this.height = height;
		this.weight = weight;
		this.waist = waist;
		this.bmi = bmi;
		this.province = province;
		this.city = city;
		this.career = career;
		this.nation = nation;
		this.avatar = avatar;
		this.examStatus = examStatus;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getUserInfoDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Long getUid() {
		return uid;
	}

	public void setUid(Long uid) {
		this.uid = uid;
	}

	public Long getMid() {
		return mid;
	}

	public void setMid(Long mid) {
		this.mid = mid;
	}

	public String getNick_name() {
		return nick_name;
	}

	public void setNick_name(String nick_name) {
		this.nick_name = nick_name;
	}

	public Integer getSex() {
		return sex;
	}

	public void setSex(Integer sex) {
		this.sex = sex;
	}

	public String getMatrix() {
		return matrix;
	}

	public void setMatrix(String matrix) {
		this.matrix = matrix;
	}

	public Integer getAge() {
		return age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}

	public Double getHeight() {
		return height;
	}

	public void setHeight(Double height) {
		this.height = height;
	}

	public Double getWeight() {
		return weight;
	}

	public void setWeight(Double weight) {
		this.weight = weight;
	}

	public Integer getWaist() {
		return waist;
	}

	public void setWaist(Integer waist) {
		this.waist = waist;
	}

	public Double getBmi() {
		return bmi;
	}

	public void setBmi(Double bmi) {
		this.bmi = bmi;
	}

	public Integer getProvince() {
		return province;
	}

	public void setProvince(Integer province) {
		this.province = province;
	}

	public Integer getCity() {
		return city;
	}

	public void setCity(Integer city) {
		this.city = city;
	}

	public String getCareer() {
		return career;
	}

	public void setCareer(String career) {
		this.career = career;
	}

	public String getNation() {
		return nation;
	}

	public void setNation(String nation) {
		this.nation = nation;
	}

	public String getAvatar() {
		return avatar;
	}

	public void setAvatar(String avatar) {
		this.avatar = avatar;
	}

	public Integer getExamStatus() {
		return examStatus;
	}

	public void setExamStatus(Integer examStatus) {
		this.examStatus = examStatus;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

	// KEEP METHODS - put your custom methods here
	// KEEP METHODS END

	/**
	 * 把json转换为一个UserInfo的对象
	 * 
	 * @param json
	 */
	public static void transformToUserInfo(UserInfo userInfo, String json) {
		try {
			JSONObject data = new JSONObject(json);
			if (data.has("uid")) {
				userInfo.setUid(data.getLong("uid"));
			}
			if (data.has("mid")) {
				userInfo.setMid(data.getLong("mid"));
			}
			if (data.has("nickname")) {
				userInfo.setNick_name(data.getString("nickname"));
			}
			if (data.has("sex")) {
				userInfo.setSex(data.getInt("sex"));
			}else{
				userInfo.setSex(-1);
			}
			if (data.has("matrix")) {
				userInfo.setMatrix(data.getString("matrix"));
			}
			if (data.has("age")) {
				userInfo.setAge(data.getInt("age"));
			}
			if (data.has("height")) {
				userInfo.setHeight(data.getDouble("height"));
			}
			if (data.has("weight")) {
				userInfo.setWeight(data.getDouble("weight"));
			}
			if (data.has("waist")) {
				userInfo.setWaist(data.getInt("waist"));
			}
			if (data.has("bmi")) {
				userInfo.setBmi(data.getDouble("bmi"));
			}
			if (data.has("province")) {
				userInfo.setProvince(data.getInt("province"));
			}
			if (data.has("city")) {
				userInfo.setCity(data.getInt("city"));
			}
			if (data.has("career")) {
				userInfo.setCareer(data.getString("career"));
			}
			if (data.has("nation")) {
				userInfo.setNation(data.getString("nation"));
			}
			if (data.has("avatar")) {
				userInfo.setAvatar(data.getString("avatar"));
			}
			if(data.has("examStatus")){
				userInfo.setExamStatus(data.getInt("examStatus"));
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}

	public static Map<String, Object> putUserInfoToMap(UserInfo userInfo) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (userInfo.getUid() != null) {
			map.put("uid", String.valueOf(userInfo.getUid()));
		}
		if (userInfo.getMid() != null) {
			map.put("mid", String.valueOf(userInfo.getMid()));
		}
		if (userInfo.getNick_name() != null) {
			map.put("nickname", userInfo.getNick_name());
		}
		if (userInfo.getSex() != null) {
			map.put("sex", userInfo.getSex());
		}
		if (userInfo.getAge() != null) {
			map.put("age", userInfo.getAge());
		}
		if (userInfo.getHeight() != null) {
			map.put("height", userInfo.getHeight());
		}
		if (userInfo.getWeight() != null) {
			map.put("weight", userInfo.getWeight());
		}
		if (userInfo.getWaist() != null) {
			map.put("waist", userInfo.getWaist());
		}
		if (userInfo.getProvince() != null) {
			map.put("province", userInfo.getProvince());
		}
		if (userInfo.getCity() != null) {
			map.put("city", userInfo.getCity());
		}
		if (userInfo.getCareer() != null) {
			map.put("career", userInfo.getCareer());
		}
		if (userInfo.getNation() != null) {
			map.put("nation", userInfo.getNation());
		}
		if(userInfo.getExamStatus() != null){
			map.put("examStatus", userInfo.getExamStatus());
		}
		return map;
	}
}
