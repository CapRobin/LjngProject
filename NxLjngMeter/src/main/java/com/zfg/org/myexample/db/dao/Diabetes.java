package com.zfg.org.myexample.db.dao;

import com.zfg.org.myexample.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table blood.
 */
public class Diabetes {

    private Long id;
    private short type;
    private int sub_type;
    /** Not-null value. */
    private String day;
    private int level;
    private float value;
    private String mark;
    private String feel;
    private long create_time;
    private long update_time;
    /** Not-null value. */
    private String service_mid;
    private String serverid;
    private short status;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DiabetesDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Diabetes() {
    }

    public Diabetes(Long id) {
        this.id = id;
    }

    public Diabetes(Long id, short type, int sub_type, String day, int level, float value, String mark, String feel, long create_time, long update_time, String service_mid, String serverid, short status) {
        this.id = id;
        this.type = type;
        this.sub_type = sub_type;
        this.day = day;
        this.level = level;
        this.value = value;
        this.mark = mark;
        this.feel = feel;
        this.create_time = create_time;
        this.update_time = update_time;
        this.service_mid = service_mid;
        this.serverid = serverid;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDiabetesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public short getType() {
        return type;
    }

    public void setType(short type) {
        this.type = type;
    }

    public int getSub_type() {
        return sub_type;
    }

    public void setSub_type(int sub_type) {
        this.sub_type = sub_type;
    }

    /** Not-null value. */
    public String getDay() {
        return day;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDay(String day) {
        this.day = day;
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        this.level = level;
    }

    public float getValue() {
        return value;
    }

    public void setValue(float value) {
        this.value = value;
    }

    public String getMark() {
        return mark;
    }

    public void setMark(String mark) {
        this.mark = mark;
    }

    public String getFeel() {
        return feel;
    }

    public void setFeel(String feel) {
        this.feel = feel;
    }

    public long getCreate_time() {
        return create_time;
    }

    public void setCreate_time(long create_time) {
        this.create_time = create_time;
    }

    public long getUpdate_time() {
        return update_time;
    }

    public void setUpdate_time(long update_time) {
        this.update_time = update_time;
    }

    /** Not-null value. */
    public String getService_mid() {
        return service_mid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setService_mid(String service_mid) {
        this.service_mid = service_mid;
    }

    public String getServerid() {
        return serverid;
    }

    public void setServerid(String serverid) {
        this.serverid = serverid;
    }

    public short getStatus() {
        return status;
    }

    public void setStatus(short status) {
        this.status = status;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
