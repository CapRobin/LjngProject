package com.zfg.org.myexample.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zfg.org.myexample.db.dao.Indicate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table indicate.
*/
public class IndicateDao extends AbstractDao<Indicate, Long> {

    public static final String TABLENAME = "indicate";

    /**
     * Properties of entity Indicate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property Img = new Property(2, Integer.class, "img", false, "IMG");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Union = new Property(4, String.class, "union", false, "UNION");
        public final static Property Update_time = new Property(5, long.class, "update_time", false, "UPDATE_TIME");
        public final static Property Last_value = new Property(6, float.class, "last_value", false, "LAST_VALUE");
        public final static Property Value1 = new Property(7, Float.class, "value1", false, "VALUE1");
        public final static Property Level = new Property(8, int.class, "level", false, "LEVEL");
        public final static Property Up_down = new Property(9, int.class, "up_down", false, "UP_DOWN");
        public final static Property Service_mid = new Property(10, String.class, "service_mid", false, "SERVICE_MID");
    };

    private DaoSession daoSession;


    public IndicateDao(DaoConfig config) {
        super(config);
    }
    
    public IndicateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'indicate' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'KEY' TEXT NOT NULL ," + // 1: key
                "'IMG' INTEGER," + // 2: img
                "'NAME' TEXT," + // 3: name
                "'UNION' TEXT," + // 4: union
                "'UPDATE_TIME' INTEGER NOT NULL ," + // 5: update_time
                "'LAST_VALUE' REAL NOT NULL ," + // 6: last_value
                "'VALUE1' REAL," + // 7: value1
                "'LEVEL' INTEGER NOT NULL ," + // 8: level
                "'UP_DOWN' INTEGER NOT NULL ," + // 9: up_down
                "'SERVICE_MID' TEXT NOT NULL );"); // 10: service_mid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'indicate'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Indicate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getKey());
 
        Integer img = entity.getImg();
        if (img != null) {
            stmt.bindLong(3, img);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String union = entity.getUnion();
        if (union != null) {
            stmt.bindString(5, union);
        }
        stmt.bindLong(6, entity.getUpdate_time());
        stmt.bindDouble(7, entity.getLast_value());
 
        Float value1 = entity.getValue1();
        if (value1 != null) {
            stmt.bindDouble(8, value1);
        }
        stmt.bindLong(9, entity.getLevel());
        stmt.bindLong(10, entity.getUp_down());
        stmt.bindString(11, entity.getService_mid());
    }

    @Override
    protected void attachEntity(Indicate entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Indicate readEntity(Cursor cursor, int offset) {
        Indicate entity = new Indicate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // img
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // union
            cursor.getLong(offset + 5), // update_time
            cursor.getFloat(offset + 6), // last_value
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // value1
            cursor.getInt(offset + 8), // level
            cursor.getInt(offset + 9), // up_down
            cursor.getString(offset + 10) // service_mid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Indicate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.getString(offset + 1));
        entity.setImg(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdate_time(cursor.getLong(offset + 5));
        entity.setLast_value(cursor.getFloat(offset + 6));
        entity.setValue1(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setLevel(cursor.getInt(offset + 8));
        entity.setUp_down(cursor.getInt(offset + 9));
        entity.setService_mid(cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Indicate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Indicate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
