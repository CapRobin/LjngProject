package com.zfg.org.myexample.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zfg.org.myexample.db.dao.AlarmHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table alarm_history.
*/
public class AlarmHistoryDao extends AbstractDao<AlarmHistory, Long> {

    public static final String TABLENAME = "alarm_history";

    /**
     * Properties of entity AlarmHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Create_time = new Property(2, Long.class, "create_time", false, "CREATE_TIME");
        public final static Property Isread = new Property(3, boolean.class, "isread", false, "ISREAD");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Server_id = new Property(5, String.class, "server_id", false, "SERVER_ID");
        public final static Property Server_mid = new Property(6, String.class, "server_mid", false, "SERVER_MID");
    };

    private DaoSession daoSession;


    public AlarmHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'alarm_history' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'CREATE_TIME' INTEGER," + // 2: create_time
                "'ISREAD' INTEGER NOT NULL ," + // 3: isread
                "'CONTENT' TEXT," + // 4: content
                "'SERVER_ID' TEXT NOT NULL ," + // 5: server_id
                "'SERVER_MID' TEXT NOT NULL );"); // 6: server_mid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'alarm_history'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AlarmHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Long create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(3, create_time);
        }
        stmt.bindLong(4, entity.getIsread() ? 1l: 0l);
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindString(6, entity.getServer_id());
        stmt.bindString(7, entity.getServer_mid());
    }

    @Override
    protected void attachEntity(AlarmHistory entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AlarmHistory readEntity(Cursor cursor, int offset) {
        AlarmHistory entity = new AlarmHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // create_time
            cursor.getShort(offset + 3) != 0, // isread
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.getString(offset + 5), // server_id
            cursor.getString(offset + 6) // server_mid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AlarmHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setCreate_time(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIsread(cursor.getShort(offset + 3) != 0);
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setServer_id(cursor.getString(offset + 5));
        entity.setServer_mid(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AlarmHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AlarmHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
